import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    chat: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
    contact?: {
      phone_number: string;
      first_name: string;
      last_name?: string;
      user_id: number;
    };
  };
}

interface UserSession {
  step: string;
  data: {
    clientName?: string;
    clientEmail?: string;
    projectTitle?: string;
    serviceDescription?: string;
    detailedDescription?: string;
    value?: string;
    deliveryTime?: string;
    observations?: string;
  };
  phone?: string;
  userId?: string;
}

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

// Armazenar sess√µes em mem√≥ria
const userSessions = new Map<number, UserSession>();

// Criar tabela em mem√≥ria para armazenar chat_ids dos usu√°rios
const userChatIds = new Map<string, number>();

const botToken = Deno.env.get('TELEGRAM_BOT_TOKEN');

async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: any) {
  console.log(`Enviando mensagem para chat ${chatId}:`, text);
  
  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN n√£o configurado');
    return;
  }
  
  const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        reply_markup: replyMarkup,
        parse_mode: 'Markdown'
      }),
    });

    const responseData = await response.json();
    console.log('Resposta do Telegram:', responseData);

    if (!response.ok) {
      console.error('Erro ao enviar mensagem Telegram:', responseData);
    }
  } catch (error) {
    console.error('Erro na requisi√ß√£o para Telegram:', error);
  }
}

async function findUserByPhone(phone: string) {
  console.log('Buscando usu√°rio pelo telefone:', phone);
  
  const cleanPhone = phone.replace(/\D/g, '');
  console.log('Telefone limpo:', cleanPhone);
  
  const { data: companies, error } = await supabase
    .from('companies')
    .select('user_id, name, email, phone, country_code')
    .or(`phone.eq.${phone},phone.eq.${cleanPhone}`)
    .limit(1);

  console.log('Resultado da busca na tabela companies:', { companies, error });

  if (companies && companies.length > 0) {
    return companies[0];
  }

  const { data: allCompanies, error: allError } = await supabase
    .from('companies')
    .select('user_id, name, email, phone, country_code');

  console.log('Buscando em todas as empresas:', { count: allCompanies?.length, error: allError });

  if (allCompanies) {
    for (const company of allCompanies) {
      if (company.phone) {
        const companyCleanPhone = company.phone.replace(/\D/g, '');
        console.log(`Comparando: ${cleanPhone} com ${companyCleanPhone} (${company.phone})`);
        
        const fullPhoneWithCountry = `${company.country_code || '+55'}${companyCleanPhone}`;
        const userPhoneWithCountry = cleanPhone.startsWith('55') ? `+${cleanPhone}` : `+55${cleanPhone}`;
        
        console.log(`Comparando com c√≥digo do pa√≠s: ${userPhoneWithCountry} com ${fullPhoneWithCountry}`);
        
        if (cleanPhone === companyCleanPhone || 
            userPhoneWithCountry === fullPhoneWithCountry ||
            phone === fullPhoneWithCountry ||
            cleanPhone === fullPhoneWithCountry.replace(/\D/g, '')) {
          console.log('‚úÖ Encontrada empresa com telefone compat√≠vel:', company);
          return company;
        }
      }
    }
  }

  console.log('‚ùå Usu√°rio n√£o encontrado pelo telefone');
  return null;
}

async function createProposalForUser(session: UserSession) {
  console.log('Criando proposta para usu√°rio:', session.userId);
  console.log('Dados da sess√£o:', session.data);
  
  if (!session.userId) {
    throw new Error('Usu√°rio n√£o identificado');
  }

  let companyId = null;
  if (session.data.clientName) {
    console.log('Criando empresa para o cliente:', session.data.clientName);
    
    const { data: company, error: companyError } = await supabase
      .from('companies')
      .insert({
        user_id: session.userId,
        name: session.data.clientName,
        email: session.data.clientEmail || null,
        phone: session.phone || null
      })
      .select()
      .single();

    console.log('Resultado da cria√ß√£o da empresa:', { company, companyError });

    if (!companyError && company) {
      companyId = company.id;
    }
  }

  const proposalValue = session.data.value ? 
    parseFloat(session.data.value.replace(/[^\d,]/g, '').replace(',', '.')) : 
    null;

  console.log('Dados da proposta a ser criada:', {
    user_id: session.userId,
    company_id: companyId,
    title: session.data.projectTitle || 'Proposta via Telegram',
    service_description: session.data.serviceDescription,
    detailed_description: session.data.detailedDescription,
    value: proposalValue,
    delivery_time: session.data.deliveryTime,
    observations: session.data.observations,
    template_id: 'moderno',
    status: 'rascunho'
  });

  const { data: proposal, error: proposalError } = await supabase
    .from('proposals')
    .insert({
      user_id: session.userId,
      company_id: companyId,
      title: session.data.projectTitle || 'Proposta via Telegram',
      service_description: session.data.serviceDescription,
      detailed_description: session.data.detailedDescription,
      value: proposalValue,
      delivery_time: session.data.deliveryTime,
      observations: session.data.observations,
      template_id: 'moderno',
      status: 'rascunho'
    })
    .select()
    .single();

  console.log('Resultado da cria√ß√£o da proposta:', { proposal, proposalError });

  if (proposalError) {
    throw proposalError;
  }

  return proposal;
}

async function storeUserChatId(userId: string, chatId: number) {
  try {
    const { error } = await supabase
      .from('telegram_bot_settings')
      .upsert({
        user_id: userId,
        chat_id: chatId
      }, {
        onConflict: 'user_id'
      });

    if (error) {
      console.error('Erro ao salvar chat_id:', error);
    }
  } catch (error) {
    console.error('Erro ao salvar chat_id:', error);
  }
}

async function handleMessage(update: TelegramUpdate) {
  console.log('=== PROCESSANDO MENSAGEM ===');
  console.log('Update recebido:', JSON.stringify(update, null, 2));
  
  const message = update.message;
  if (!message) {
    console.log('Nenhuma mensagem encontrada no update');
    return;
  }

  const chatId = message.chat.id;
  const userId = message.from.id;
  const text = message.text || '';

  console.log(`Mensagem recebida de ${userId} (chat: ${chatId}): ${text}`);

  // Verificar se √© comando /start
  if (text === '/start') {
    console.log('Comando /start recebido, reiniciando conversa');
    // Limpar sess√£o anterior
    userSessions.delete(userId);
    
    // Criar nova sess√£o
    userSessions.set(userId, {
      step: 'start',
      data: {}
    });
  }

  if (!userSessions.has(userId)) {
    console.log('Criando nova sess√£o para usu√°rio:', userId);
    userSessions.set(userId, {
      step: 'start',
      data: {}
    });
  }

  const session = userSessions.get(userId)!;
  console.log('Estado atual da sess√£o:', session);

  if (message.contact) {
    console.log('Contato compartilhado:', message.contact);
    session.phone = message.contact.phone_number;
    
    const user = await findUserByPhone(session.phone);
    if (user) {
      session.userId = user.user_id;
      console.log('Usu√°rio encontrado:', user);
      
      // Armazenar chat_id para notifica√ß√µes futuras
      await storeUserChatId(user.user_id, chatId);
      
      const { data: companyData } = await supabase
        .from('companies')
        .select('*')
        .eq('user_id', user.user_id)
        .single();
      
      console.log('Dados da empresa:', companyData);
      
      const businessInfo = companyData ? 
        `Empresa: ${companyData.name}\nSetor: ${companyData.description || 'N√£o informado'}` : 
        `Usu√°rio: ${user.name}`;
      
      await sendTelegramMessage(chatId, 
        `‚úÖ *Telefone identificado!* Ol√° ${user.name}!\n\n` +
        `üìã ${businessInfo}\n\n` +
        `ü§ñ *Bem-vindo ao @borafecharai_bot!*\n\n` +
        `üöÄ Posso te ajudar a:\n` +
        `‚Ä¢ Criar propostas profissionais\n` +
        `‚Ä¢ Enviar notifica√ß√µes sobre suas propostas\n` +
        `‚Ä¢ Acompanhar status das propostas\n\n` +
        `*Para qual cliente voc√™ quer criar uma proposta?*\n` +
        `Digite o nome da empresa ou cliente:`
      );
      session.step = 'client_name';
    } else {
      console.log('Usu√°rio n√£o encontrado pelo telefone:', session.phone);
      await sendTelegramMessage(chatId, 
        `‚ùå *Telefone n√£o encontrado na nossa base de dados.*\n\n` +
        `Para usar este bot, voc√™ precisa:\n` +
        `1. Ter uma conta no sistema Bora Fechar A√≠\n` +
        `2. Cadastrar seu telefone em "Configura√ß√µes > Meu Neg√≥cio"\n\n` +
        `üì± Telefone pesquisado: ${session.phone}\n\n` +
        `üí° Acesse o sistema e verifique se seu telefone est√° correto em suas configura√ß√µes.\n\n` +
        `Digite /start para tentar novamente.`
      );
      userSessions.delete(userId);
    }
    return;
  }

  switch (session.step) {
    case 'start':
      console.log('Processando comando /start');
      const keyboard = {
        keyboard: [[{
          text: "üì± Compartilhar Telefone",
          request_contact: true
        }]],
        one_time_keyboard: true,
        resize_keyboard: true
      };
      
      await sendTelegramMessage(chatId, 
        `ü§ñ *Ol√°! Eu sou o @borafecharai_bot!*\n\n` +
        `Sou seu assistente para cria√ß√£o de propostas profissionais.\n\n` +
        `üì≤ *Funcionalidades:*\n` +
        `‚Ä¢ Criar propostas pelo Telegram\n` +
        `‚Ä¢ Receber notifica√ß√µes em tempo real\n` +
        `‚Ä¢ Acompanhar status das propostas\n\n` +
        `Para come√ßar, preciso identificar voc√™ pelo seu telefone cadastrado no sistema.\n\n` +
        `üëá *Clique no bot√£o abaixo para compartilhar seu telefone:*`,
        keyboard
      );
      break;

    case 'client_name':
      if (!text.trim()) {
        await sendTelegramMessage(chatId, 
          `‚ùå *Nome do cliente n√£o pode estar vazio.*\n\nPor favor, digite o nome da empresa ou cliente:`
        );
        return;
      }
      
      console.log('Coletando nome do cliente:', text);
      session.data.clientName = text.trim();
      session.step = 'client_email';
      await sendTelegramMessage(chatId, 
        `‚úÖ Cliente: *${text}*\n\n*Qual o e-mail do cliente?*\n(opcional - digite "pular" para pular)`
      );
      break;

    case 'client_email':
      console.log('Coletando email do cliente:', text);
      if (text.toLowerCase().trim() !== 'pular') {
        // Validar email b√°sico
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(text.trim())) {
          await sendTelegramMessage(chatId, 
            `‚ùå *E-mail inv√°lido.* Por favor, digite um e-mail v√°lido ou "pular" para pular:`
          );
          return;
        }
        session.data.clientEmail = text.trim();
      }
      session.step = 'project_title';
      await sendTelegramMessage(chatId, 
        `${text.toLowerCase().trim() !== 'pular' ? '‚úÖ E-mail: *' + text + '*' : '‚è≠Ô∏è E-mail pulado'}\n\n*Qual √© o t√≠tulo do projeto/proposta?*\nEx: "Desenvolvimento de Website Institucional"`
      );
      break;

    case 'project_title':
      if (!text.trim()) {
        await sendTelegramMessage(chatId, 
          `‚ùå *T√≠tulo n√£o pode estar vazio.*\n\nPor favor, digite o t√≠tulo do projeto:`
        );
        return;
      }
      
      console.log('Coletando t√≠tulo do projeto:', text);
      session.data.projectTitle = text.trim();
      session.step = 'service_description';
      await sendTelegramMessage(chatId, 
        `‚úÖ T√≠tulo: *${text}*\n\n*Fa√ßa um resumo do servi√ßo:*\nEx: "Cria√ß√£o de website responsivo com CMS"`
      );
      break;

    case 'service_description':
      if (!text.trim()) {
        await sendTelegramMessage(chatId, 
          `‚ùå *Descri√ß√£o n√£o pode estar vazia.*\n\nPor favor, fa√ßa um resumo do servi√ßo:`
        );
        return;
      }
      
      console.log('Coletando descri√ß√£o do servi√ßo:', text);
      session.data.serviceDescription = text.trim();
      session.step = 'detailed_description';
      await sendTelegramMessage(chatId, 
        `‚úÖ Resumo salvo!\n\n*Agora fa√ßa uma descri√ß√£o mais detalhada do que ser√° entregue:*\n\nüí° Seja espec√≠fico sobre o que o cliente receber√°.`
      );
      break;

    case 'detailed_description':
      if (!text.trim()) {
        await sendTelegramMessage(chatId, 
          `‚ùå *Descri√ß√£o detalhada n√£o pode estar vazia.*\n\nPor favor, descreva o que ser√° entregue:`
        );
        return;
      }
      
      console.log('Coletando descri√ß√£o detalhada:', text);
      session.data.detailedDescription = text.trim();
      session.step = 'value';
      await sendTelegramMessage(chatId, 
        `‚úÖ Descri√ß√£o detalhada salva!\n\n*Qual o valor da proposta?*\nEx: "R$ 5.000,00" ou "5000" (ou digite "pular" para definir depois)`
      );
      break;

    case 'value':
      console.log('Coletando valor:', text);
      if (text.toLowerCase().trim() !== 'pular') {
        // Validar se √© um n√∫mero v√°lido
        const numericValue = text.replace(/[^\d,]/g, '').replace(',', '.');
        if (!numericValue || isNaN(parseFloat(numericValue))) {
          await sendTelegramMessage(chatId, 
            `‚ùå *Valor inv√°lido.* Por favor, digite um valor num√©rico (ex: 5000 ou R$ 5.000,00) ou "pular":`
          );
          return;
        }
        session.data.value = text.trim();
      }
      session.step = 'delivery_time';
      await sendTelegramMessage(chatId, 
        `${text.toLowerCase().trim() !== 'pular' ? '‚úÖ Valor: *' + text + '*' : '‚è≠Ô∏è Valor para definir depois'}\n\n*Qual o prazo de entrega?*\nEx: "30 dias" ou "2 semanas" (ou digite "pular")`
      );
      break;

    case 'delivery_time':
      console.log('Coletando prazo:', text);
      if (text.toLowerCase().trim() !== 'pular') {
        session.data.deliveryTime = text.trim();
      }
      session.step = 'observations';
      await sendTelegramMessage(chatId, 
        `${text.toLowerCase().trim() !== 'pular' ? '‚úÖ Prazo: *' + text + '*' : '‚è≠Ô∏è Prazo para definir depois'}\n\n*Alguma observa√ß√£o adicional?*\nEx: Condi√ß√µes de pagamento, garantias, etc.\n\n(ou digite "pular" para finalizar)`
      );
      break;

    case 'observations':
      console.log('Coletando observa√ß√µes:', text);
      if (text.toLowerCase().trim() !== 'pular') {
        session.data.observations = text.trim();
      }
      
      try {
        console.log('Iniciando cria√ß√£o da proposta...');
        await sendTelegramMessage(chatId, 
          `üéØ *Gerando sua proposta...*\n\n‚è≥ Por favor aguarde, estou processando suas informa√ß√µes...`
        );

        const proposal = await createProposalForUser(session);
        
        console.log('Proposta criada com sucesso:', proposal);
        
        // Resumo da proposta criada
        let summary = `üéâ *Proposta criada com sucesso!*\n\n`;
        summary += `üìù *T√≠tulo:* ${session.data.projectTitle}\n`;
        summary += `üë§ *Cliente:* ${session.data.clientName}\n`;
        if (session.data.clientEmail) {
          summary += `üìß *E-mail:* ${session.data.clientEmail}\n`;
        }
        if (session.data.value) {
          summary += `üí∞ *Valor:* ${session.data.value}\n`;
        }
        if (session.data.deliveryTime) {
          summary += `‚è∞ *Prazo:* ${session.data.deliveryTime}\n`;
        }
        summary += `\n‚úÖ A proposta foi salva como rascunho na sua conta.\n\n`;
        summary += `üåê *Pr√≥ximos passos:*\n`;
        summary += `1. Acesse o sistema para revisar\n`;
        summary += `2. Envie a proposta para o cliente\n`;
        summary += `3. Acompanhe o status aqui no Telegram\n\n`;
        summary += `üîÑ Para criar outra proposta, digite /start novamente.`;
        
        await sendTelegramMessage(chatId, summary);

        userSessions.delete(userId);
        
      } catch (error) {
        console.error('Erro ao criar proposta:', error);
        await sendTelegramMessage(chatId, 
          `‚ùå *Erro ao criar proposta*\n\n` +
          `Ocorreu um erro interno: ${error.message}\n\n` +
          `üîÑ Tente novamente digitando /start ou use o sistema web diretamente.\n\n` +
          `üí¨ Se o problema persistir, entre em contato com o suporte.`
        );
        userSessions.delete(userId);
      }
      break;

    default:
      console.log('Comando n√£o reconhecido, orientando usu√°rio...');
      await sendTelegramMessage(chatId, 
        `‚ùì *N√£o entendi sua mensagem.*\n\n` +
        `ü§ñ Para come√ßar uma nova conversa, digite /start\n\n` +
        `üí° *Comandos dispon√≠veis:*\n` +
        `‚Ä¢ /start - Iniciar cria√ß√£o de proposta\n` +
        `‚Ä¢ Compartilhar telefone - Para identifica√ß√£o`
      );
      break;
  }

  console.log('Sess√£o atualizada:', userSessions.get(userId));
}

serve(async (req) => {
  console.log('=== WEBHOOK TELEGRAM CHAMADO ===');
  console.log('M√©todo:', req.method);
  console.log('URL:', req.url);
  console.log('Headers:', Object.fromEntries(req.headers.entries()));
  
  if (req.method === 'OPTIONS') {
    console.log('Requisi√ß√£o OPTIONS (CORS preflight)');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    if (req.method === 'POST') {
      const body = await req.text();
      console.log('Body bruto recebido:', body);
      
      const update: TelegramUpdate = JSON.parse(body);
      console.log('Update parseado:', JSON.stringify(update, null, 2));
      
      await handleMessage(update);
      
      return new Response(JSON.stringify({ ok: true }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log('Requisi√ß√£o GET recebida - webhook est√° ativo');
    return new Response('ü§ñ @borafecharai_bot webhook ativo e funcionando!', {
      headers: { ...corsHeaders, 'Content-Type': 'text/plain' },
    });
    
  } catch (error) {
    console.error('=== ERRO NO WEBHOOK ===');
    console.error('Erro:', error);
    console.error('Stack:', error.stack);
    
    return new Response(JSON.stringify({ 
      error: error.message,
      stack: error.stack 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
